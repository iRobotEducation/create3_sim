###
### This is the configuration file defining what our style fixer, uncrustify, should do.
### All options can be found here http://uncrustify.sourceforge.net/config.txt and follow
### a convention, which helps to find them:
###   - `nl_` for newline styles
###   - `indent_` for indentation styles
###   - `sp_` for spacing styles
###   - `align_` for alignment styles
###
### Notes:
###   - If in doubt whether or not the fixer is doing what we want, refer to what we do in other languages (PHP, JS).
###   - Some of the following options help prevent the fixer from messing with calls to DB::read. Not a single other style fixer can handle those correctly.
###     The most important one is use_indent_func_call_param.
###   - You can get crazy and pass `-L A` to uncrustify for thorough logging of what it's doing.
###

# Indent styles
#code_width = 160
indent_with_tabs        = 0     # 1=indent to level only, 2=indent with tabs
input_tab_size          = 8     # original tab size
output_tab_size         = 4     # new tab size
indent_columns          = 4
indent_align_string     = FALSE # align broken strings
indent_brace            = 0
indent_class            = TRUE
use_indent_func_call_param  = FALSE
indent_func_call_param      = FALSE
indent_align_assign         = FALSE
indent_align_paren          = FALSE
indent_paren_close          = 2
indent_paren_open_brace     = FALSE
indent_shift                = TRUE
indent_continue             = 0
indent_param                = 0
indent_single_newlines      = FALSE
indent_relative_single_line_comments = FALSE
indent_paren_after_func_def = FALSE
indent_switch_case          = indent_columns

# New line styles
newlines                    = LF        # AUTO (default), CRLF, CR, or LF
nl_start_of_file            = remove
nl_end_of_file              = force
nl_end_of_file_min          = 1
nl_max                      = 2
nl_before_block_comment     = 2
nl_after_func_body          = 2
nl_after_func_proto_group   = 2
nl_assign_brace             = add       # "= {" vs "= \n {"
nl_enum_brace               = add       # "enum {" vs "enum \n {"
nl_union_brace              = add       # "union {" vs "union \n {"
nl_struct_brace             = add       # "struct {" vs "struct \n {"
nl_do_brace                 = add       # "do {" vs "do \n {"
nl_if_brace                 = remove    # "if () {" vs "if () \n {"
nl_for_brace                = remove    # "for () {" vs "for () \n {"
nl_else_brace               = remove    # "else {" vs "else \n {"
nl_while_brace              = remove    # "while () {" vs "while () \n {"
nl_switch_brace             = remove    # "switch () {" vs "switch () \n {"
nl_func_var_def_blk         = 0
nl_before_case              = 1
nl_fcall_brace              = add       # "foo() {" vs "foo()\n{"
nl_fdef_brace               = add       # "int foo() {" vs "int foo()\n{"
nl_after_return             = TRUE
nl_brace_while              = remove
nl_brace_else               = remove
nl_brace_catch              = remove
nl_squeeze_ifdef            = TRUE

pos_bool                    = trail     # BOOL ops on trailing end

eat_blanks_before_close_brace   = TRUE
eat_blanks_after_open_brace     = TRUE

mod_paren_on_return     = remove    # "return 1;" vs "return (1);"
mod_full_brace_if       = add       # "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_for      = add       # "for () a--;" vs "for () { a--; }"
mod_full_brace_do       = add       # "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while    = add       # "while (a) a--;" vs "while (a) { a--; }"

# Spacing styles
sp_before_byref         = remove
sp_before_semi          = remove
sp_paren_paren          = remove    # space between (( and ))
sp_return_paren         = force     # "return (1);" vs "return(1);"
sp_sizeof_paren         = remove    # "sizeof (int)" vs "sizeof(int)"
sp_before_sparen        = force     # "if (" vs "if("
sp_after_sparen         = force     # "if () {" vs "if (){"
sp_after_cast           = force     # "(int) a" vs "(int)a"
sp_inside_braces        = force     # "{ 1 }" vs "{1}"
sp_inside_braces_struct = force     # "{ 1 }" vs "{1}"
sp_inside_braces_enum   = force     # "{ 1 }" vs "{1}"
sp_inside_paren         = remove
sp_inside_fparen        = remove
sp_inside_sparen        = remove
sp_inside_square        = remove
sp_assign               = force
sp_arith                = force
sp_bool                 = force
sp_compare              = force
sp_assign               = force
sp_after_comma          = force
sp_func_def_paren       = remove    # "int foo (){" vs "int foo(){"
sp_func_call_paren      = remove    # "foo (" vs "foo("
sp_func_proto_paren     = remove    # "int foo ();" vs "int foo();"
sp_func_class_paren     = remove
sp_before_angle         = remove
sp_after_angle          = force
sp_inside_angle         = remove
sp_permit_cpp11_shift   = TRUE
sp_angle_shift          = remove
sp_sparen_brace         = add
sp_fparen_brace         = add
sp_inside_braces        = remove
sp_after_ptr_star       = force
sp_before_ptr_star      = remove
sp_between_ptr_star     = remove
sp_brace_else           = force
sp_else_brace           = force
sp_catch_brace          = force
sp_catch_paren          = force
sp_brace_catch          = force
sp_after_byref          = force
sp_before_tr_emb_cmt    = ignore
sp_num_before_tr_emb_cmt = 0

# Alignment styles
align_with_tabs         = FALSE     # use tabs to align
align_on_tabstop        = FALSE     # align on tabstops
align_enum_equ_span     = 0
align_nl_cont           = FALSE
align_var_def_span      = 0
align_var_def_thresh    = 12
align_var_def_colon     = FALSE
align_assign_span       = 0
align_struct_init_span  = 0
align_var_struct_span   = 0
align_pp_define_span    = 0
align_pp_define_gap     = 0
align_number_right      = FALSE
align_typedef_span      = 0
align_typedef_gap       = 0
align_func_proto_span   = 0
align_same_func_call_params = FALSE
align_left_shift        = FALSE
align_single_line_brace = FALSE
align_func_params_span  = 0
align_right_cmt_span    = 0
align_right_cmt_at_col  = 0

# Comment styles
cmt_cpp_group           = FALSE
cmt_star_cont           = TRUE